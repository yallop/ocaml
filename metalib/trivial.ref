BER MetaOCaml toplevel, version N 102
        OCaml version 4.02.1

#   #   - : int = 5
#   val fact : int -> int = <fun>
#   #   - : int code = .<1>. 
#   - : string code = .<"aaa">. 
#   #     - : int Runcode.closed_code = .<1>. 
#     * *   - : 'a list -> 'a list = <fun>
#       - : ('a list -> 'a list) code = .<List.rev>. 
#     Characters 74-75:
  .<fun x -> .~(let y = x in y)>.;;
                        ^
Wrong level: variable bound at level 1 and used at level 0
# * * * * *   Error was expected
- : unit = ()
#   Characters 18-28:
  .<fun x -> 1 + .~(.<true>.)>.;;
                   ^^^^^^^^^^
Error: This expression has type bool but an expression was expected of type
         int
# * * * * * *   Error was expected
- : unit = ()
#         - : int code = .<1>. 
# * *   - : float code = .<1.>. 
# * *   - : bool code = .<true>. 
# * *   - : string code = .<"aaa">. 
# * *   - : char code = .<'a'>. 
# * *   - : char list code = .<(* CSP x *)>. 
# * *     val l : 'a -> 'a code = <fun>
#   - : int code = .<(* CSP x *) Obj.magic 1>. 
# * *   # - : float code = .<1.>. 
# * *   # - : 'a list code = .<(* CSP x *) Obj.magic 0>. 
# * *   #   - : (int -> int) code = .<(* CSP x *)>. 
# * * * * * *     - : ('a list -> 'a list) code = .<List.rev>. 
# * *     - : ('a array -> int -> 'a) code = .<Array.get>. 
# * *   - : (int -> int -> int) code = .<Pervasives.(+)>. 
# * *       - : unit code = .<assert true>. 
# * *   - : unit = ()
#     - : int code = .<Pervasives.succ 1>. 
# * *     #   - : int code = .<1 + 2>. 
# * *   #   - : int code = .<String.length "abc">. 
# * *     #   - : string code = .<StringLabels.sub "abc" ~pos:1 ~len:2>. 
# * *     #   - : string code = .<StringLabels.sub "abc" ~pos:1 ~len:2>. 
# * *     #     - : int code code = .<.< 1  >.>. 
#   - : int code = .<1>. 
#   #   - : int code = .<Runcode.(!.) .< 1  >.>. 
# * *   # - : int code = .<1 + 2>. 
# * *   - : int code = .<(2 + 4) + (2 + 4)>. 
# * *   #   Characters 27-28:
  .<1 + .~(let x = 2 in .<.<x>.>.)>.;;
                            ^
Error: This expression has type 'a code
       but an expression was expected of type int
# * * * * *   Error was expected
- : unit = ()
# - : int code = .<1 + (Runcode.(!.) .< 2  >.)>. 
# * *   # Characters 12-40:
  !. .<1 + .~ (.~(let x = 2 in .<.<x>.>.))>.;;
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Wrong level: escape at level 0
# * * * * *   Error was expected
- : unit = ()
#   - : int code code = .<.< .~(.< 1  >.)  >.>. 
# * * *   - : int code = .<1>. 
# * *   #   - : int code code = .<.< .~(.< 1  >.)  >.>. 
# * * *   #     - : int code = .<1>. 
# * *   #   - : int code code = .<(* CSP x *)>. 
# * *   - : int code = .<1>. 
# * *   #   - : int code code = .<.< .~((* CSP x *))  >.>. 
# * *   #   - : ('a list -> 'a list) code code = .<.< .~(.< List.rev  >.)  >.>. 
# * *   - : ('_a list -> '_a list) code = .<List.rev>. 
# * *   #   * *   - : int code code = .<.< assert true; 1  >.>. 
# * *   #   - : int code = .<assert true; 1>. 
# * *   - : int code = .<assert true; 1>. 
# * *   - : int code = .<assert true; 1>. 
# * *     #   - : int code = .<assert true; 1>. 
# * *         - : int lazy_t code = .<lazy 1>. 
# * *   #     - : (int * string) code = .<(1, "abc")>. 
# * *   - : (int * string * char) code = .<(1, "abc", 'd')>. 
# * *     #     - : 'a array code = .<[||]>. 
# * *   - : int array code = .<[|(1 + 2);(1 + 2)|]>. 
# * *       - : 'a code = .<Pervasives.raise Not_found>. 
# * *   Characters 52-64:
  .<raise (Scan_failure "")>.;;
           ^^^^^^^^^^^^
Error: Unbound constructor Scan_failure
# * * * * *   Error was expected
- : unit = ()
# - : 'a code = .<Pervasives.raise (Scanf.Scan_failure "")>. 
# * *   # - : 'a code = .<Pervasives.raise (Scanf.Scan_failure "")>. 
# * *   Exception: Scanf.Scan_failure "".
# * *   Exception was expected
- : unit = ()
#     - : bool code = .<true>. 
# * *   - : int option code = .<Some 1>. 
# * *   - : int list option code = .<Some [1]>. 
# * *   # - : 'a option code = .<None>. 
# * *   #   - : Genlex.token code = .<Genlex.Int 1>. 
# * *   # - : Genlex.token code = .<Genlex.Int 1>. 
# * *   #   module Foo : sig exception E end
# Characters 8-13:
  .<raise Foo.E>.;;
          ^^^^^
Exception (extension) Foo.E cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#   type foo = Bar
# Characters 2-5:
  .<Bar>.;;
    ^^^
Unqualified constructor Bar cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#   module Foo : sig type foo = Bar end
# Characters 2-9:
  .<Foo.Bar>.;;
    ^^^^^^^
Constructor Bar cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#       - : Complex.t code = .<{ Complex.re = 1.0; Complex.im = 2.0 }>. 
# * *     # - : float code = .<(* CSP x *).Complex.re>. 
# * * * * * * * *     - : float code = .<(* CSP x *).Complex.re>. 
# * * *   # - : int code = .<(* CSP x *).Pervasives.contents>. 
# * *   # - : unit code = .<(* CSP x *).Pervasives.contents <- 2>. 
# * * *   - : int ref = {contents = 2}
#     # - : Complex.t code = .<{ Complex.re = 1.0; Complex.im = 2.0 }>. 
# * *   # - : float code = .<(* CSP x *).Complex.re>. 
# * * *   #   type foo = { fool : int; }
# Characters 3-7:
  .<{fool = 1}>.;;
     ^^^^
Unqualified label fool cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#       - : int code = .<if true then 1 else 2>. 
#   - : unit code = .<if (Some 1) = None then Pervasives.print_string "weird">. 
# * *   #     - : [> `Foo ] code = .<`Foo>. 
# * *   - : [> `Bar of int ] code = .<`Bar 1>. 
# * *   #     val f : < foo : 'a; .. > -> 'a code = <fun>
# * *   val x : < foo : int > = <obj>
# * *   - : int code = .<(* CSP x *)#foo>. 
# * *   #     - : float code = .<Complex.norm { Complex.re = 3.0; Complex.im = 4.0 }>. 
# * *     #   - : float code = .<Complex.norm { Complex.re = 4.0; Complex.im = 3.0 }>. 
# * *     #       - : unit code = .<
for i_1 = 1 to 5 do
  Printf.printf
    (CamlinternalFormatBasics.Format
       ((CamlinternalFormatBasics.String_literal
           ("ok ",
             (CamlinternalFormatBasics.Int
                (CamlinternalFormatBasics.Int_d,
                  CamlinternalFormatBasics.No_padding,
                  CamlinternalFormatBasics.No_precision,
                  (CamlinternalFormatBasics.Char_literal
                     (' ',
                       (CamlinternalFormatBasics.Int
                          (CamlinternalFormatBasics.Int_d,
                            CamlinternalFormatBasics.No_padding,
                            CamlinternalFormatBasics.No_precision,
                            (CamlinternalFormatBasics.Char_literal
                               ('\n', CamlinternalFormatBasics.End_of_format)))))))))),
         "ok %d %d\n")) i_1 (i_1 + 1)
done>. 
# * * *   ok 1 2
ok 2 3
ok 3 4
ok 4 5
ok 5 6
- : unit = ()
# * * * * * *     - : unit code = .<
for i_3 = 5 downto 1 do
  Printf.printf
    (CamlinternalFormatBasics.Format
       ((CamlinternalFormatBasics.String_literal
           ("ok ",
             (CamlinternalFormatBasics.Int
                (CamlinternalFormatBasics.Int_d,
                  CamlinternalFormatBasics.No_padding,
                  CamlinternalFormatBasics.No_precision,
                  (CamlinternalFormatBasics.Char_literal
                     (' ',
                       (CamlinternalFormatBasics.Int
                          (CamlinternalFormatBasics.Int_d,
                            CamlinternalFormatBasics.No_padding,
                            CamlinternalFormatBasics.No_precision,
                            (CamlinternalFormatBasics.Char_literal
                               ('\n', CamlinternalFormatBasics.End_of_format)))))))))),
         "ok %d %d\n")) i_3 (i_3 + 1)
done>. 
# * * *   ok 5 6
ok 4 5
ok 3 4
ok 2 3
ok 1 2
- : unit = ()
# * * * * * *     - : unit code = .<
for i_5 = 1 to 2 do
  for j_6 = 1 to 3 do
    Printf.printf
      (CamlinternalFormatBasics.Format
         ((CamlinternalFormatBasics.String_literal
             ("ok ",
               (CamlinternalFormatBasics.Int
                  (CamlinternalFormatBasics.Int_d,
                    CamlinternalFormatBasics.No_padding,
                    CamlinternalFormatBasics.No_precision,
                    (CamlinternalFormatBasics.Char_literal
                       (' ',
                         (CamlinternalFormatBasics.Int
                            (CamlinternalFormatBasics.Int_d,
                              CamlinternalFormatBasics.No_padding,
                              CamlinternalFormatBasics.No_precision,
                              (CamlinternalFormatBasics.Char_literal
                                 ('\n',
                                   CamlinternalFormatBasics.End_of_format)))))))))),
           "ok %d %d\n")) i_5 j_6
  done
done>. 
# * * * * *     ok 1 1
ok 1 2
ok 1 3
ok 2 1
ok 2 2
ok 2 3
- : unit = ()
# * * * * * * *       val c : unit code = .<
  for i_9 = 1 to 2 do
    for i_10 = 1 to 3 do
      Printf.printf
        (CamlinternalFormatBasics.Format
           ((CamlinternalFormatBasics.String_literal
               ("ok ",
                 (CamlinternalFormatBasics.Int
                    (CamlinternalFormatBasics.Int_d,
                      CamlinternalFormatBasics.No_padding,
                      CamlinternalFormatBasics.No_precision,
                      (CamlinternalFormatBasics.Char_literal
                         (' ',
                           (CamlinternalFormatBasics.Int
                              (CamlinternalFormatBasics.Int_d,
                                CamlinternalFormatBasics.No_padding,
                                CamlinternalFormatBasics.No_precision,
                                (CamlinternalFormatBasics.Char_literal
                                   ('\n',
                                     CamlinternalFormatBasics.End_of_format)))))))))),
             "ok %d %d\n")) i_10 i_9
    done
  done>. 
# * * * * *   ok 1 1
ok 2 1
ok 3 1
ok 1 2
ok 2 2
ok 3 2
- : unit = ()
# * * * * * * *       - : unit code = .<for _for_11 = 1 to 3 do Pervasives.print_string "ok" done>. 
# * *   okokok- : unit = ()
# * *         - : unit code = .<for i_13 = 1 to 10 do () done>. 
# * *   Exception:
Failure
 "The code built at Characters 62-63:\n  .<for i=1 to 10 do  .~(let _ = !. .<i>. in .<()>.) done>.;;\n        ^\n is not closed: identifier i_14 bound at Characters 62-63:\n  .<for i=1 to 10 do  .~(let _ = !. .<i>. in .<()>.) done>.;;\n        ^\n is free".
# * * * * * * * * * *   Error was expected
- : unit = ()
#     - : unit code = .<for i_16 = 1 to 5 do Pervasives.ignore 0 done>. 
# * *       Exception:
Failure
 "Scope extrusion detected at Characters 184-199:\n                       .<for i=1 to 5 do ignore (.~(!r)) done>.;;\n                                         ^^^^^^^^^^^^^^^\n for code built at Characters 101-102:\n  let r = ref .<0>. in .<for i=1 to 5 do .~(r := .<i>.; .<()>.) done>.; \n                             ^\n for the identifier i_17 bound at Characters 101-102:\n  let r = ref .<0>. in .<for i=1 to 5 do .~(r := .<i>.; .<()>.) done>.; \n                             ^\n".
# * * * *   Error was expected
- : unit = ()
#       Exception:
Failure
 "Scope extrusion detected at Characters 140-155:\n                       .<for i=1 to 5 do ignore (.~(!r)) done>.;;\n                                         ^^^^^^^^^^^^^^^\n for code built at Characters 77-80:\n  let r = ref .<0>. in .<for i=1 to 5 do .~(r := .<i+1>.; .<()>.) done>.; \n                                                   ^^^\n for the identifier i_19 bound at Characters 55-56:\n  let r = ref .<0>. in .<for i=1 to 5 do .~(r := .<i+1>.; .<()>.) done>.; \n                             ^\n".
#   * * * * * * * *   Error was expected
- : unit = ()
#     - : ('a -> 'a) code = .<fun x_21  -> x_21>. 
# * *   #   - : (int -> int -> int) code = .<fun x_23  -> fun y_24  -> x_23 + y_24>. 
# * *   #   - : ('a -> int -> int) code = .<fun x_27  -> fun x_28  -> x_28 + x_28>. 
# * *   #     val eta : ('a code -> 'b code) -> ('a -> 'b) code = <fun>
# * *   - : (int -> int) code = .<fun x_31  -> 1 + x_31>. 
# * *   - : (int -> int -> int) code = .<fun x_32  -> fun x_33  -> x_33 + x_32>. 
# * *   #         val fhyg : int code -> int -> int code = <fun>
# * *   - : int code = .<
(fun x_36  -> (fun x_37  -> (fun x_38  -> ((1 + x_36) + x_37) + x_38) 1) 2) 3>.

# * * *   #       - : (unit -> int) code = .<fun ()  -> 1>. 
#   - : unit -> int = <fun>
#   #   - : (bool -> int) code = .<function | true  -> 1 | false  -> 0>. 
# * *   #   - : (bool * 'a list -> int) code = .<fun (true ,[])  -> 1>. 
# * *   Exception: Match_failure ("//toplevel//", 526, 6).
# * *   Error was expected
- : unit = ()
# #   - : (bool array -> int) code = .<fun [|true ;false ;false |]  -> 1>. 
# * *   #   - : ([> `F of int ] -> bool) code = .<function | `F 1 -> true | _ -> false>. 
# * *   # - : ([> `F of int | `G of int ] -> bool) code = .<
function | `F 1|`G 2 -> true | _ -> false>. 
# * * *     - : (int * string -> int) code = .<function | (1,"str") -> 1 | (2,_) -> 2>. 
# * *   # # #   #   # # # #   # - : (Complex.t -> int) code = .<
function
| { Complex.re = 1.0 } -> 1
| { Complex.re = 2.0; Complex.im = 2.0 } -> 2
| { Complex.im = _ } -> 3>. 
# * * * * * *       #   #     #         - : (unit -> int) code = .<fun ()  -> 1>. 
# * *   #       - : ('a -> bool) code = .<fun _  -> true>. 
#   #   - : (int * int -> int) code = .<fun (x_42,y_43)  -> x_42 + y_43>. 
# * *   # - : (int option -> int) code = .<
function | Some x_46 as y_47 -> x_46 | _ -> 2>. 
# * *   # # - : (int list -> int) code = .<
function
| x_52::y_53::z_54::[] -> (x_52 - y_53) + z_54
| x_55::y_56::[] -> x_55 - y_56>. 
# * * * * *   #     - : (int list -> int) code = .<
fun (x_62::y_63::[]|x_62::y_63::_::[])  -> x_62 - y_63>. 
# * * *   # # Exception: Match_failure ("//toplevel//", 590, -90).
#   Error was expected
- : unit = ()
#   - : (int list -> int) code = .<
fun (x_70::y_71::[]|x_70::y_71::_::[]|y_71::x_70::_::_::[])  -> x_70 - y_71>. 
# * * *   # # #   - : ([< `E of 'a | `F of 'a | `G of 'a ] -> 'a) code = .<
function | `F x_78|`G x_78 -> x_78 | `E x_79 -> x_79>. 
# * * *   # # - : (Complex.t -> float) code = .<
function
| { Complex.re = x_82 } -> x_82
| { Complex.re = y_83; Complex.im = x_84 } -> x_84 -. y_83>. 
# * * * * *   - : (Complex.t -> float) code = .<
function
| { Complex.re = x_85; Complex.im = 2.0 } -> x_85
| { Complex.re = y_86; Complex.im = x_87 } -> x_87 -. y_86>. 
# * * * * *     #   # - : (int option -> int option) code = .<
function | Some x_94 as y_95 when x_94 > 0 -> y_95 | _ -> None>. 
# * * *     #   #     - : bool code = .<match 1 with | 1 -> true>. 
# * *   #   - : bool code = .<match (1, 2) with | (1,x_100) -> true | x_101 -> false>. 
# * *   - : int code = .<
match [1; 2] with | x_102::[] -> x_102 | x_103::y_104::[] -> x_103 + y_104>. 
# * * *     #     - : int code = .<
match [1; 2] with
| x_108::[] -> x_108
| x_109::y_110::[]|x_109::y_110::_::[] -> x_109 + y_110>. 
# * * * * *   #   - : int code = .<
match [1; 2; 3; 4] with
| x_114::[] -> x_114
| x_115::y_116::[]|x_115::y_116::_::[]|y_116::x_115::_::_::[] ->
    x_115 - y_116>.

# * * * * *     #   - : ([< `E of 'a | `F of 'a | `G of 'a ] -> 'a) code = .<
fun x_120  ->
  match x_120 with | `F x_121|`G x_121 -> x_121 | `E x_122 -> x_122>.

# * * *     #   # - : (Complex.t -> float) code = .<
fun x_126  ->
  match x_126 with
  | { Complex.re = x_127; Complex.im = 2.0 } -> x_127
  | { Complex.re = y_128; Complex.im = x_129 } -> x_129 -. y_128>.

# * * * * * *         #     - : bool code = .<
match List.mem 1 [] with | x_134 -> x_134 | exception Not_found  -> false>. 
# * * *               * * * * * * * *       val f : ((int * string) list -> string) code = .<
  fun x_136  ->
    match List.assoc 1 x_136 with
    | "1" as x_137 -> x_137
    | x_138 -> x_138
    | exception Not_found  -> ""
    | exception Invalid_argument x_139 -> x_139>.
  
#     - : (int -> bool option) code = .<
fun x_140  ->
  try Some (List.assoc x_140 [(1, true); (2, false)])
  with | Not_found  -> None>.

# * * * * *     #   #   #   - : (string -> string) code = .<
fun x_144  ->
  try
    Scanf.sscanf x_144
      (CamlinternalFormatBasics.Format
         ((CamlinternalFormatBasics.Int
             (CamlinternalFormatBasics.Int_d,
               CamlinternalFormatBasics.No_padding,
               CamlinternalFormatBasics.No_precision,
               CamlinternalFormatBasics.End_of_format)), "%d"))
      (fun x_145  -> Pervasives.string_of_int x_145)
  with | Scanf.Scan_failure x_146 -> "fail " ^ x_146>.

# * * * * * *       #   #       - : int code = .<let x_153 = 1 in x_153>. 
# * *     # - : int code = .<let x_155 = 1 in let x_156 = x_155 + 1 in x_156>. 
# * *     # - : int code = .<
let rec f_159 n_160 = if n_160 = 0 then 1 else n_160 * (f_159 (n_160 - 1)) in
f_159 5>. 
# * * *     #       - : int code = .<
let f_164 x_163 = x_163 in
let rec f_165 n_166 = if n_166 = 0 then 1 else n_166 * (f_165 (n_166 - 1)) in
f_165 5>. 
# * * * * * * * * *       #     - : int code = .<
let f_172 x_171 = x_171 in
let f_174 n_173 = if n_173 = 0 then 1 else n_173 * (f_172 (n_173 - 1)) in
f_174 5>. 
# * * * *     #       - : (int * int) code = .<
let g_180 x_179 = x_179 + 10 in
let f_181 x_184 = (g_180 x_184) + 20
and g_182 n_183 = if n_183 = 0 then 1 else n_183 * (g_180 (n_183 - 1)) in
((f_181 5), (g_182 5))>. 
#   * * * * * *       #       - : (int * int) code = .<
let g_192 x_191 = x_191 + 10 in
let rec f_193 x_196 = (g_194 x_196) + 20
and g_194 n_195 = if n_195 = 0 then 1 else n_195 * (g_194 (n_195 - 1)) in
((f_193 5), (g_194 5))>. 
#   * * * * * * * * * *           #     * * * * *   Characters 11-13:
  .<let rec [] = [] in []>.
            ^^
Only variables are allowed as left-hand side of `let rec'
#     * * * * *   Characters 11-16:
  .<let rec f = f in f>.
            ^^^^^
Recursive let binding must be to a function
#       - : (int -> bool) code = .<
fun x_203  ->
  let rec even_204 = function | 0 -> true | x_207 -> odd_205 (x_207 - 1)
  and odd_205 = function | 0 -> false | x_206 -> even_204 (x_206 - 1) in
  even_204 x_203>.

# * * * * * *   # #       - : int code = .<let x_218 = 1
                 and y_219 = 2 in x_218 + y_219>. 
# * *   #   - : int code = .<
let x_222 = 1 in let x_223 = x_222 + 1
                 and y_224 = x_222 + 1 in x_223 + y_224>.

# * * *   # - : (int option -> int) code = .<
fun x_228  -> let Some x_229 = x_228 in x_229 + 1>. 
# * * * * * * * * *   # Exception: Match_failure ("//toplevel//", 831, -265).
# * *   Error was expected
- : unit = ()
#         - : int code = .<1>. 
#   - : int code = .<x_235>.

Failure("The code built at Characters 63-64:\n  let r = ref .<0>. in let _ = .<fun x -> .~(r := .<x>.; .<0>.)>. in !r ;;\n                                     ^\n is not closed: identifier x_235 bound at Characters 63-64:\n  let r = ref .<0>. in let _ = .<fun x -> .~(r := .<x>.; .<0>.)>. in !r ;;\n                                     ^\n is free")
# * * * *   Error was expected
- : unit = ()
#   Exception:
Failure
 "The code built at Characters 44-45:\n  let c = let r = ref .<0>. in let _ = .<fun x -> .~(r := .<x>.; .<0>.)>. in (!r) in !. c;;\n                                             ^\n is not closed: identifier x_236 bound at Characters 44-45:\n  let c = let r = ref .<0>. in let _ = .<fun x -> .~(r := .<x>.; .<0>.)>. in (!r) in !. c;;\n                                             ^\n is free".
# * * * *   Error was expected
- : unit = ()
#   - : ('_a -> '_a) code = .<fun y_239  -> x_238>.

Failure("The code built at Characters 58-68:\n  let r = ref .<fun y->y>. in let _ = .<fun x -> .~(r := .<fun y -> x>.; .<0>.)>. in !r ;;\n                                                           ^^^^^^^^^^\n is not closed: identifier x_238 bound at Characters 43-44:\n  let r = ref .<fun y->y>. in let _ = .<fun x -> .~(r := .<fun y -> x>.; .<0>.)>. in !r ;;\n                                            ^\n is free")
# * * * * *   Error was expected
- : unit = ()
#       Exception:
Failure
 "Scope extrusion detected at Characters 139-147:\n   let _ = .<fun x -> .~(r := .<fun y -> x>.; .<0>.)>. in .<fun x -> .~(!r) 1>. ;;\n                                                                     ^^^^^^^^\n for code built at Characters 102-112:\n   let _ = .<fun x -> .~(r := .<fun y -> x>.; .<0>.)>. in .<fun x -> .~(!r) 1>. ;;\n                                ^^^^^^^^^^\n for the identifier x_241 bound at Characters 87-88:\n   let _ = .<fun x -> .~(r := .<fun y -> x>.; .<0>.)>. in .<fun x -> .~(!r) 1>. ;;\n                 ^\n".
# * * * * *   Error was expected
- : unit = ()
#   * *   - : ('_a -> '_a) code = .<fun y_246  -> y_246>. 
# * *         - : ('_a -> '_b -> '_b) code = .<fun x_248  -> fun y_249  -> y_249>. 
# * *   - : ('_a -> '_a -> '_a) code = .<fun x_251  -> fun y_252  -> x_251>. 
# * *     #   
All done

- : unit = ()
# 
